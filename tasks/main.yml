---
- name: Grid Router | Install certain python modules for docker
  pip:
    name: "{{ item.name }}"
  with_items:
    - { name: docker }

- name: Grid Router | Download sctl
  get_url:
    url: "https://github.com/seleniumkit/sctl/releases/download/{{ grid_router_sctl_version }}/sctl_linux_amd64"
    dest: /usr/local/bin/sctl
    mode: 0755
    force: yes
  changed_when: False

- name: Grid Router | Create config dir
  file:
    path: "{{ grid_router_qouta_path }}"
    state: directory
    mode: 0755

- name: Grid Router | Copy quota json template
  template:
    src: quota_template.json.j2
    dest: "{{ grid_router_qouta_path }}/quota_template.json"
    mode: 0644

- name: Grid Router | Generate quota file
  shell: sctl generate --inputFile "{{ grid_router_qouta_path }}/quota_template.json" --outputDirectory "{{ grid_router_qouta_path }}"

- name: Grid Router | Run Grid Router container
  docker_container:
    name: grid_router
    restart_policy: always
    image: "aerokube/ggr:{{ grid_router_version }}"
    network_mode: host
    state: started
    volumes:
      - "{{ grid_router_path }}:{{ grid_router_path }}:ro"
    env:
      TZ: "{{ grid_router_time_zone }}"
    ports:
      - "{{ grid_router_port }}:{{ grid_router_port }}"
    entrypoint: ["/usr/bin/ggr", "-listen", ":4444", "-quotaDir", "{{ grid_router_qouta_path }}", "-guests-allowed", "-guests-quota", "{{ grid_router_qouta_user }}"]

- name: Grid Router UI | Run Grid Router UI container
  docker_container:
    name: ggr-ui
    restart_policy: always
    detach: yes
    image: "aerokube/ggr-ui:{{ grid_router_ui_version }}"
    state: started
    volumes:
      - "{{ grid_router_path }}:/etc/grid-router:ro"
    ports:
      - "8888:8888"

- name: Selenoid UI | Check selenoid UI container exist
  shell: "docker ps -aq --filter \"name={{ item }}\""
  with_items:
    - "selenoid-ui"
  register: found_containers

- name: Selenoid UI | Remove selenoid UI container if exist
  shell: "docker stop {{ item.item }} && docker rm -fv {{ item.item }}"
  with_items: "{{ found_containers.results }}"
  when: item.stdout

- name: Selenoid UI | Start selenoid UI
  docker_container:
    name: cm
    image: "aerokube/cm:{{ cm_version }}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/root:/root"
    command: >
      selenoid-ui start
        --force